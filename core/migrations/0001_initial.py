# Generated by Django 4.2.6 on 2024-04-06 03:23

from django.conf import settings
import django.contrib.auth.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_email', models.EmailField(max_length=100, unique=True)),
                ('user_phone_code', models.CharField(blank=True, default='+254', max_length=4, null=True, validators=[django.core.validators.RegexValidator('^\\+\\d{1,3}$')])),
                ('user_first_name', models.CharField(blank=True, max_length=30, null=True)),
                ('user_last_name', models.CharField(blank=True, max_length=30, null=True)),
                ('user_avatar', models.FileField(blank=True, null=True, upload_to='')),
                ('username', models.CharField(default='admin', max_length=56, unique=True)),
                ('password', models.CharField(default='123456', max_length=128)),
                ('user_phone_number', models.CharField(blank=True, max_length=10, null=True, unique=True, validators=[django.core.validators.RegexValidator('^\\d{9,10}$', 'Enter a valid phone number.')])),
                ('user_type', models.CharField(choices=[('vehicle_owner', 'Vehicle Owner'), ('mechanic', 'Mechanic')], default='mechanic', max_length=20)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ServiceType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('service_type', models.CharField(choices=[('Regular Maintenance', 'Regular Maintenance'), ('Diagnostic Services', 'Diagnostic Services'), ('Brake Services', 'Brake Services'), ('Tire Services', 'Tire Services'), ('Exhaust System Services', 'Exhaust System Services'), ('Transmission Services', 'Transmission Services'), ('Electrical System Services', 'Electrical System Services'), ('Cooling System Services', 'Cooling System Services'), ('Air Conditioning Services', 'Air Conditioning Services'), ('Fuel System Services', 'Fuel System Services'), ('Suspension and Steering Services', 'Suspension and Steering Services'), ('Engine Services', 'Engine Services'), ('Safety Inspections', 'Safety Inspections'), ('Preventive Maintenance', 'Preventive Maintenance')], max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='SubService',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subservice_name', models.CharField(choices=[('Oil change', 'Oil change'), ('Fluid checks', 'Fluid checks'), ('Tire rotation', 'Tire rotation'), ('Battery inspection', 'Battery inspection'), ('Engine diagnostics', 'Engine diagnostics'), ('Computerized vehicle inspection', 'Computerized vehicle inspection'), ('Brake pad replacement', 'Brake pad replacement'), ('Brake fluid flush', 'Brake fluid flush'), ('Brake system inspection', 'Brake system inspection'), ('Tire replacement', 'Tire replacement'), ('Wheel alignment', 'Wheel alignment'), ('Tire balancing', 'Tire balancing'), ('Exhaust system repair', 'Exhaust system repair'), ('Catalytic converter replacement', 'Catalytic converter replacement'), ('Transmission fluid change', 'Transmission fluid change'), ('Transmission system inspection and repair', 'Transmission system inspection and repair'), ('Battery replacement', 'Battery replacement'), ('Alternator repair', 'Alternator repair'), ('Radiator flush', 'Radiator flush'), ('Thermostat replacement', 'Thermostat replacement'), ('A/C recharge', 'A/C recharge'), ('A/C system inspection and repair', 'A/C system inspection and repair'), ('Fuel injector cleaning', 'Fuel injector cleaning'), ('Fuel filter replacement', 'Fuel filter replacement'), ('Shock and strut replacement', 'Shock and strut replacement'), ('Power steering fluid flush', 'Power steering fluid flush'), ('Engine tune-up', 'Engine tune-up'), ('Timing belt replacement', 'Timing belt replacement'), ('State vehicle inspections', 'State vehicle inspections'), ('General safety inspections', 'General safety inspections'), ('Comprehensive vehicle checkups', 'Comprehensive vehicle checkups')], default=None, max_length=100)),
                ('service_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.servicetype')),
            ],
        ),
        migrations.CreateModel(
            name='UtilColumnsModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True)),
                ('updated_at', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True)),
                ('is_active', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='VehiclePart',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vehicle_part_name', models.CharField(max_length=255)),
                ('vehicle_part_comments', models.TextField(blank=True, null=True)),
                ('vehicle_part_working_condition', models.BooleanField(default=True)),
                ('vehicle_part_sub_service', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.subservice')),
            ],
        ),
        migrations.CreateModel(
            name='VehicleService',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vehicle_next_service_date', models.DateField()),
                ('vehicle_previous_service_date', models.DateField()),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('vehicle_part', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.vehiclepart')),
            ],
        ),
        migrations.CreateModel(
            name='Vehicle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vehicle_plate_number', models.CharField(max_length=255, unique=True)),
                ('vehicle_general_condition', models.CharField(choices=[('healthy', 'Healthy'), ('unhealthy', 'Unhealthy')], default='healthy', max_length=20)),
                ('vehicle_type', models.CharField(max_length=40)),
                ('vehicle_model', models.CharField(max_length=255)),
                ('vehicle_engine_number', models.CharField(max_length=255, unique=True)),
                ('vehicle_color', models.CharField(max_length=255)),
                ('vehicle_owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('vehicle_parts', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.vehiclepart')),
            ],
        ),
    ]
